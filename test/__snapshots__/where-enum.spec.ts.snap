// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Where expects meta schema to remain the same 1`] = `
Object {
  "types": Array [
    Object {
      "container": "Entities",
      "cosmos": true,
      "database": "Test",
      "external": false,
      "fields": Array [
        Object {
          "container": null,
          "cosmos": false,
          "database": null,
          "fieldname": "id",
          "ours": null,
          "pagination": false,
          "returnMany": false,
          "returnTypename": "ID",
          "sortOurs": null,
          "sortable": false,
          "theirs": null,
          "whereOps": Array [],
          "whereOurs": null,
        },
        Object {
          "container": null,
          "cosmos": false,
          "database": null,
          "fieldname": "status",
          "ours": null,
          "pagination": false,
          "returnMany": false,
          "returnTypename": "Status",
          "sortOurs": null,
          "sortable": false,
          "theirs": null,
          "whereOps": Array [
            "eq",
            "neq",
            "in",
            "nin",
          ],
          "whereOurs": null,
        },
      ],
      "filterable": true,
      "sortable": false,
      "typename": "Entity",
    },
    Object {
      "container": null,
      "cosmos": false,
      "database": null,
      "external": false,
      "fields": Array [
        Object {
          "container": "Entities",
          "cosmos": true,
          "database": "Test",
          "fieldname": "entities",
          "ours": null,
          "pagination": true,
          "returnMany": true,
          "returnTypename": "Entity",
          "sortOurs": null,
          "sortable": false,
          "theirs": null,
          "whereOps": Array [],
          "whereOurs": null,
        },
      ],
      "filterable": false,
      "sortable": false,
      "typename": "Query",
    },
  ],
}
`;

exports[`Where expects schema to remain the same 1`] = `
"schema {
  query: Query
}
type Query {
  entities(where: EntityWhere, cursor: String, limit: Int): EntityPage!
}
type Entity {
  id: ID!
  status: Status!
}
enum Status {
  NONE
  OPEN
  CLOSE
}
type EntityPage {
  total: Int!
  cursor: String
  nextCursor: String
  page: [Entity]!
}
input EntityWhere {
  and: [EntityWhere!]
  or: [EntityWhere!]
  status_eq: Status
  status_neq: Status
  status_in: [Status]
  status_nin: [Status]
}"
`;
